# Hello World Service Example
# This is a concrete example using the k8s hello-app image
# Ready to deploy - just run: kubectl apply -f hello-world-example.yaml

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world-service-deployment
  namespace: audience-ns
  labels:
    app: hello-world-service
    argocd.argoproj.io/instance: dev-audworkstream-hello-world-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hello-world-service
  template:
    metadata:
      labels:
        app: hello-world-service
    spec:
      containers:
      - name: hello-world-service
        image: gcr.io/google-samples/hello-app:1.0
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        env:
        - name: PORT
          value: "8080"
      securityContext:
        runAsUser: 1001

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: hello-world-service-svc
  namespace: audience-ns
  labels:
    app: hello-world-service
    argocd.argoproj.io/instance: dev-audworkstream-hello-world-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: hello-world-service
  sessionAffinity: None

---
# VirtualService (Istio)
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: hello-world-service-vs
  namespace: default
  labels:
    argocd.argoproj.io/instance: dev-audworkstream-hello-world-service
spec:
  gateways:
  - istio-ingressgw-shared-dev-eastus2-001
  hosts:
  - '*'
  http:
  - match:
    - uri:
        prefix: /web/hello-world
    route:
    - destination:
        host: hello-world-service-svc.audience-ns.svc.cluster.local
        port:
          number: 8080

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hello-world-service-hpa
  namespace: audience-ns
  labels:
    app: hello-world-service
    argocd.argoproj.io/instance: dev-audworkstream-hello-world-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: hello-world-service-deployment
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
